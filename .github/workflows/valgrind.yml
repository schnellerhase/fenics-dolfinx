name: valgrind

on:
  push:
    branches:
      - "**"
    tags:
      - "v*"
  pull_request:
    branches:
      - main
  merge_group:
    branches:
      - main

jobs:
  valgrind:
    runs-on: ubuntu-24.04
    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      PRTE_MCA_rmaps_default_mapping_policy: :oversubscribe   # Newer OpenMPI
      OMPI_MCA_rmaps_base_oversubscribe: true                 # Older OpenMPI
      VALGRIND_FLAGS: "--suppressions=cpython/Misc/valgrind-python.supp --leak-check=full --show-leak-kinds=definite,indirect --errors-for-leak-kinds=definite,indirect --error-exitcode=1"
      # Slow, but useful for in-depth info: --track-origins=yes --read-var-info=yes

    steps:
      - uses: actions/checkout@v4

      - name: Load environment variables
        run: cat .github/workflows/fenicsx-refs.env >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install catch2 cmake g++ libblas-dev libboost-dev libhdf5-mpi-dev \
             liblapack-dev libparmetis-dev libpugixml-dev libspdlog-dev mpi-default-dev \
             ninja-build pkg-config valgrind
          sudo apt-get remove python python3
          which python

      - uses: actions/checkout@v4
        with:
          repository: 'python/cpython'
          ref: 'v3.13.2'
          path: 'cpython'

      - name: Build Python
        working-directory: cpython
        run: |
          ./configure --with-valgrind
          make -j4 all
          sudo make install
          which python

      - name: Install Python build dependencies
        run: pip install --upgrade -r python/build-requirements.txt

      - name: Install FEniCS Python components
        run: |
          pip install git+https://github.com/fenics/ufl.git@${{ env.ufl_ref }}
          pip install git+https://github.com/fenics/basix.git@${{ env.basix_ref }}
          pip install git+https://github.com/fenics/ffcx.git@${{ env.ffcx_ref }}
  
      - name: Configure and install C++
        run: |
          cmake -G Ninja -DDOLFINX_ENABLE_PETSC=false -DCMAKE_BUILD_TYPE=Developer -B build -S cpp/
          cmake --build build
          sudo cmake --install build

      - name: Build C++ unit tests
        run: |
          cmake -G Ninja -DCMAKE_BUILD_TYPE=Developer -B build/test/ -S cpp/test/
          cmake --build build/test --parallel 4

      - name: Run C++ unit tests (serial)
        run: |
          cd build/test
          valgrind ${VALGRIND_FLAGS} ctest -V --output-on-failure -R unittests

      - name: Run C++ unit tests (MPI)
        run: |
          cd build/test
          mpirun -n 3 valgrind ${VALGRIND_FLAGS} ctest -V --output-on-failure -R unittests

      - name: Build Python interface
        run: |
          pip install --check-build-dependencies --no-build-isolation --config-settings=cmake.build-type="Debug" 'python/[test]'
          python -c "from mpi4py import MPI; import dolfinx; assert not dolfinx.has_petsc4py"

      - name: Run demos (Python, serial)
        run: |
          pip install pytest-xdist
          valgrind ${VALGRIND_FLAGS} python -m pytest -n auto -m serial --durations=10 python/demo/test.py

      - name: Run demos (Python, MPI (np=3))
        run: valgrind ${VALGRIND_FLAGS} python -m pytest -m mpi --num-proc=3 python/demo/test.py

      - name: Run unit tests
        run: valgrind ${VALGRIND_FLAGS} python -m pytest -n auto -m "not petsc4py and not adios2" python/test/unit

      - name: Run unit tests (MPI, np=3)
        run: mpirun -np 3 valgrind ${VALGRIND_FLAGS} python -m pytest -m "not petsc4py and not adios2" python/test/unit
